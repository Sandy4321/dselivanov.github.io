<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Data Science notes</title>
    <link>/tags/r/</link>
    <description>Recent content in R on Data Science notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>selivanov.dmitriy@gmail.com (Dmitriy Selivanov)</managingEditor>
    <webMaster>selivanov.dmitriy@gmail.com (Dmitriy Selivanov)</webMaster>
    <lastBuildDate>Mon, 10 Jul 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Benchmarking different implementations of weighted-ALS matrix factorization</title>
      <link>/post/2017-07-10-bench-wrmf/</link>
      <pubDate>Mon, 10 Jul 2017 00:00:00 +0000</pubDate>
      <author>selivanov.dmitriy@gmail.com (Dmitriy Selivanov)</author>
      <guid>/post/2017-07-10-bench-wrmf/</guid>
      <description>updated 01/08/2017 - added CG solver in reco, adjusted results
As I promised in last post, I’m going to share benchmark of different implementation of matrix factorization with Weighted Alternating Least Squares. User-Item interaction matrix is made from lastfm-360K dataset. Implementations incude:
My reco R package Ben Frederickson implicit python module Apache Spark implementation Quora’s qmf solver  For the transparency I’ve created repository with all the code.</description>
    </item>
    
    <item>
      <title>Matrix factorization for recommender systems (part 2)</title>
      <link>/post/2017-06-28-matrix-factorization-for-recommender-systems-part-2/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      <author>selivanov.dmitriy@gmail.com (Dmitriy Selivanov)</author>
      <guid>/post/2017-06-28-matrix-factorization-for-recommender-systems-part-2/</guid>
      <description>In previous post I explained Weigted Alternating Least Squares algorithm for matrix factorization. This post will be more practical - we will build a model which will recommend artists recommendations based on history of track listenings.
Design of evaluation and cross validation Before we will go to modeling we need to discuss how we will validate our model. At the very beginning I would like to highlight that final validation should be done online through A/B testing (or more advanced “bandit” approach).</description>
    </item>
    
    <item>
      <title>Matrix factorization for recommender systems</title>
      <link>/post/2017-05-28-matrix-factorization-for-recommender-systems/</link>
      <pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate>
      <author>selivanov.dmitriy@gmail.com (Dmitriy Selivanov)</author>
      <guid>/post/2017-05-28-matrix-factorization-for-recommender-systems/</guid>
      <description>Generally speaking the task for a recommender system is not to make up-sale. The real task is to keep customers engaged in your service. With loyal customers, you can monetize your service.
Recommender systems is a very wide area, but in this post I won’t go into basics. Instead, I will explain collaborative filtering and more precisely - de-facto industry standard - matrix factorization.
User-Item interactions The idea of collaborative filtering is that given collected behavior of many customers you can find some patterns and predict their future actions using history of actions of similar customers.</description>
    </item>
    
  </channel>
</rss>